<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//speed
spd = 0.5;
regMaxSpd = 4.5;
dashMaxSpd = 7;
maxSpd = regMaxSpd;
canTalk = false;
phy_fixed_rotation = true;
dash=false;
coolDown = false;
talking = false;
alarm[1] = 1;
playThatSong = false;

particle1 = part_type_create();
part_type_sprite(particle1,spr_particle,0,0,0);
part_type_size(particle1,0.7,2,0,0);
part_type_scale(particle1,1,1);
part_type_color1(particle1,c_white);
part_type_speed(particle1,3,5,0,0);
part_type_direction(particle1,0,359,0,0);
part_type_orientation(particle1,0,360,0,0,1);
part_type_blend(particle1,false);
part_type_life(particle1,30,60);
Sname = part_system_create();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>coolDown=true;
canDash = true;
dash = false;
phy_linear_damping = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
phy_fixed_rotation = true;
phy_rotation = 0;
if (!talking) {
var isWalking = false
if (keyboard_check(ord("W")) or keyboard_check(vk_up)) {
    phy_speed_y -= spd;
    isWalking = true;
}
if (keyboard_check(ord("A")) or keyboard_check(vk_left)) {
    phy_speed_x -= spd;
    isWalking = true;
}
if (keyboard_check(ord("S")) or keyboard_check(vk_down)) {
    phy_speed_y += spd;
    isWalking = true;
}
if (keyboard_check(ord("D")) or keyboard_check(vk_right)) {
    phy_speed_x += spd;
    isWalking = true;
}

phy_speed_y = clamp(phy_speed_y, -maxSpd, maxSpd);
phy_speed_x = clamp(phy_speed_x, -maxSpd, maxSpd);

if !place_meeting(x,y,obj_text) {
    canTalk = false;
} else {
    canTalk = true;
}

if keyboard_check(vk_shift) {
    if (!dash) and (!coolDown) {
        canDash = false;
        maxSpd = dashMaxSpd;
        phy_linear_damping = 0;
        dash = true;
        alarm[0] = 30;
    } 
}
if(coolDown) {
    maxSpd -= 0.1;
    if maxSpd&lt;= regMaxSpd {
        maxSpd = regMaxSpd;
        coolDown = false;
    }
}

var angle = point_direction(x,y,x+phy_speed_x,y+phy_speed_y) - 180;
    part_type_direction(particle1,angle-10,angle+10,0,0);
if(dash) {
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,3);
} else if (isWalking) and (random(1) &lt;0.1){
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
    part_emitter_burst(Sname,emitter1,particle1,1);
}
}else {
    phy_speed_x = 0;
    phy_speed_y = 0;
    coolDown = false;
    dash = false;
    canDash = true;
    phy_linear_damping = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collide

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_particles_clear(Sname);
if (!playThatSong) and (room == rm_3) {
    audio_stop_all();
    audio_play_sound(song_3,0,true);
    playThatSong = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (canTalk) and (!talking) {
    draw_sprite(spr_talkPointer,0,x,y-60);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>-1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,99</point>
    <point>73,99</point>
    <point>73,125</point>
    <point>5,125</point>
  </PhysicsShapePoints>
</object>
